CMAKE_MINIMUM_REQUIRED(VERSION 2.8)


IF(USE_SYSTEM_GLM)
    FIND_PACKAGE(GLM REQUIRED)
ELSE(USE_SYSTEM_GLM)
    INCLUDE("${CMAKE_MODULE_PATH}/build_glm.cmake")
ENDIF(USE_SYSTEM_GLM)


IF(USE_SYSTEM_FREETYPE)
    FIND_PACKAGE(Freetype REQUIRED)
ELSE(USE_SYSTEM_FREETYPE)
    INCLUDE("${CMAKE_MODULE_PATH}/build_freetype.cmake")
ENDIF(USE_SYSTEM_FREETYPE)


IF(UNIX)
    FIND_PACKAGE(FontConfig REQUIRED)
ENDIF(UNIX)

FIND_PACKAGE(OpenGL REQUIRED)
INCLUDE("${CMAKE_MODULE_PATH}/FindGLEWmx.cmake")


IF(FREETYPE_FOUND AND OPENGL_FOUND AND GLEWmx_FOUND)
    ADD_DEFINITIONS(-DGLEW_MX)
ELSE(FREETYPE_FOUND AND OPENGL_FOUND AND GLEWmx_FOUND)
    IF(NOT FREETYPE_FOUND)
        MESSAGE(FATAL_ERROR "FreeType Not Found")
    ELSEIF(NOT OPENGL_FOUND)
        MESSAGE(FATAL_ERROR "OpenGL Not Found")
    ELSEIF(NOT GLEWmx_FOUND)
        MESSAGE(FATAL_ERROR "GLEW-MX Not Found")
    ENDIF()
ENDIF(FREETYPE_FOUND AND OPENGL_FOUND AND GLEWmx_FOUND)


IF(${USE_WINDOW_TOOLKIT} STREQUAL "glfw3")
    FIND_PACKAGE(GLFW REQUIRED)
    IF(GLFW_FOUND)
        SET(WTK_INCLUDE_DIRS ${GLFW_INCLUDE_DIR})
        SET(WTK_LIBRARIES ${GLFW_LIBRARY})
        ADD_DEFINITIONS(-DUSE_GLFW)
    ELSEIF(GLFW_FOUND)
        MESSAGE(FATAL_ERROR "GLFW not found")
    ENDIF(GLFW_FOUND)
ENDIF()

IF(${USE_WINDOW_TOOLKIT} STREQUAL "sdl2")
    FIND_PACKAGE(SDL2 REQUIRED)
    IF(SDL2_FOUND)
        SET(WTK_INCLUDE_DIRS ${SDL2_INCLUDE_DIR})
        SET(WTK_LIBRARIES ${SDL2_LIBRARY})
        ADD_DEFINITIONS(-DUSE_SDL)
    ELSEIF(SDL2_FOUND)
        MESSAGE(FATAL_ERROR "SDL2 not found")
    ENDIF(SDL2_FOUND)
ENDIF()


IF(NOT UNIX)
    ADD_DEFINITIONS(-DFGDLL)
ENDIF(NOT UNIX)
# OS Definitions
IF(UNIX)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
ELSE(UNIX) #Windows
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
ENDIF(UNIX)


INCLUDE_DIRECTORIES(
    ${CMAKE_INCLUDE_PATH}
    ${FREETYPE_INCLUDE_DIRS}
    ${GLM_INCLUDE_DIRS}
    ${OPENGL_INCLUDE_DIR}
    ${GLEW_INCLUDE_DIR}
    ${WTK_INCLUDE_DIRS}
    "${PROJECT_SOURCE_DIR}/include"
    "${PROJECT_SOURCE_DIR}/src"
    )

IF(UNIX)
    INCLUDE_DIRECTORIES("${FONTCONFIG_INCLUDE_DIR}")
ENDIF(UNIX)

SET(X11_LIBS "")
IF(APPLE OR UNIX)
    FIND_PACKAGE(X11 REQUIRED)
    INCLUDE_DIRECTORIES(${X11_INCLUDE_DIR})
    SET(X11_LIBS ${X11_LIBRARIES})
ENDIF(APPLE OR UNIX)

FILE(GLOB api_headers
    "${PROJECT_SOURCE_DIR}/include/*.h"
    "${PROJECT_SOURCE_DIR}/include/fg/*.h"
    )

FILE(GLOB headers
    "*.hpp"
    "*.h"
    )

FILE(GLOB sources
    "*.c"
    "*.cpp"
    )

SOURCE_GROUP(API FILES ${api_headers})
SOURCE_GROUP(Headers FILES ${headers})
SOURCE_GROUP(Sources FILES ${sources})
IF(${USE_WINDOW_TOOLKIT} STREQUAL "glfw3")
    FILE(GLOB wtk_headers
        "glfw/*.hpp")
    FILE(GLOB wtk_sources
        "glfw/*.cpp")
    SOURCE_GROUP(Headers\\glfw FILES ${wtk_headers})
    SOURCE_GROUP(Sources\\glfw FILES ${wtk_sources})
ENDIF()
IF(${USE_WINDOW_TOOLKIT} STREQUAL "sdl2")
    FILE(GLOB wtk_headers
        "sdl/*.hpp")
    FILE(GLOB wtk_sources
        "sdl/*.cpp")
    SOURCE_GROUP(Headers\\sdl FILES ${wtk_headers})
    SOURCE_GROUP(Sources\\sdl FILES ${wtk_sources})
ENDIF()

ADD_LIBRARY(forge SHARED
    ${api_headers}
    ${headers}
    ${sources}
    ${wtk_headers}
    ${wtk_sources}
    )

TARGET_LINK_LIBRARIES(forge
    ${FONTCONFIG_LIBRARY}
    ${FREETYPE_LIBRARIES}
    ${OPENGL_gl_LIBRARY}
    ${WTK_LIBRARIES}
    ${GLEWmx_LIBRARY}
    ${X11_LIBS}
    )

INSTALL(TARGETS forge DESTINATION ${FG_INSTALL_LIB_DIR})
